name: Build Libra Image and Save as Tar

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          # NOTE: do NOT set cache: "pnpm" here â€” that tries to call pnpm before it's installed.
          # If you want caching for other package managers you can use cache: "npm" or "yarn".

      - name: Ensure pnpm is available (corepack + fallback)
        run: |
          set -e
          echo "Enabling corepack..."
          corepack enable || echo "corepack enable failed (will try fallback)"
          echo "Activating pnpm via corepack..."
          corepack prepare pnpm@latest --activate || echo "corepack prepare failed (will try npm global install)"

          # Fallback: if pnpm still missing, install globally via npm
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found, installing pnpm globally as fallback..."
            npm install -g pnpm@latest
          fi

          echo "pnpm location and version:"
          which pnpm || true
          pnpm -v

      # Optional: cache pnpm store (enable if you want)
      # - name: Cache pnpm store
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.pnpm-store
      #     key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       pnpm-store-${{ runner.os }}-

      - name: Generate package.json + pnpm-lock.yaml
        run: |
          set -e
          # create package.json if missing
          if [ ! -f package.json ]; then
            pnpm init -y
          fi

          # tune for ESM worker
          node -e "const p=require('./package.json'); p.name='libra-worker'; p.version='1.0.0'; p.type='module'; p.main='worker.js'; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2))"

          # install runtime deps used by worker.js
          pnpm add --save \
            bullmq \
            ioredis \
            @aws-sdk/client-s3 \
            fs-extra \
            tmp-promise \
            node-fetch@3 \
            pino

          echo "package.json:"
          cat package.json
          echo "pnpm-lock.yaml exists?"; ls -la pnpm-lock.yaml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          echo "Building Docker image myorg/libra:${IMAGE_TAG}"
          DOCKER_BUILDKIT=1 docker build -t myorg/libra:${IMAGE_TAG} .

      - name: Save Docker image as TAR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          mkdir -p output
          TAR_PATH="output/libra-${IMAGE_TAG}.tar"
          docker save myorg/libra:${IMAGE_TAG} -o "$TAR_PATH"
          ls -lh "$TAR_PATH"

      - name: Upload TAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: libra-tar
          path: output/
